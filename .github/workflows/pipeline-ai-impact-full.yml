name: AI Impact Full Pipeline

on:
  workflow_dispatch:
  #pull_request:
  #  types: [opened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  generate_tests_docs:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST 'http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'client_id=ai-impact-client' \
            -d "username=administrator" \
            -d "password=Gft@2025" \
            -d "scope=openid" \
            -d "grant_type=password")

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "Failed to obtain access token"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi

          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Checkout the branch
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: Create Classes List
        id: changes
        run: |
          echo "$(pwd)"
          java_files=$(find supplier-api/src/main/java -type f -name "*.java")          
          JAVA_FILES=()
          
          while IFS= read -r FILE; do
            echo "Processing file: $FILE"
            JAVA_FILES+=("$FILE")
          done <<< "$java_files"
          
          echo "JAVA_FILES: ${JAVA_FILES[@]}"
          {
            echo "java_files<<EOF"
            printf "%s\n" "${JAVA_FILES[@]}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Prepare and Send to API (TestCreator)
        id: send_api
        run: |
          FILES_ARRAY=()
          while IFS= read -r FILE; do
            CLASS_NAME=$(basename "$FILE" .java)
            TEST_FILE="supplier-api/src/test/${FILE#supplier-api/src/main/}"
            TEST_FILE="${TEST_FILE%.java}Test.java"
            FILES_ARRAY+=(--form "files=@${FILE}")
            if [ -f "$TEST_FILE" ]; then
              FILES_ARRAY+=(--form "ExistingTests=@${TEST_FILE}")
            fi
          done <<< "${{ env.java_files }}"


          RESPONSE=$(curl --location 'http://api.gftaiimpact.local/ai/test' \
            --header "Authorization: Bearer ${{ env.access_token }}" \
            --form "RunName=GenerateTests" \
            "${FILES_ARRAY[@]}" \
            --form "jobName=DemoTestCreator" \
            --form "SearchPattern=*.java" \
            --form "TargetExtension=java" \
            --form "PromptId=TestCreator__CreateUnitTests_V1" \
            --form "SourceCodeLanguage=Java" \
            --form "TestType=Unit" \
            --form "TestingFrameworks=SpringBootTest" \
            --form "Llm=${{ vars.LLM }}" \
            --form "AdditionalInstructions=Generate only the source code, without any extra information")
          echo "API Response: $RESPONSE"
          JOB_ID=$(echo $RESPONSE)
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: Monitor Job Status
        id: monitor_status
        run: |
          JOB_ID=${{ env.job_id }}
          STATUS="Pending"
          while [[ "$STATUS" != "Completed" ]]; do
            RESPONSE=$(curl --location "http://api.gftaiimpact.local/ai/jobs/$JOB_ID/status" \
              --header "Authorization: Bearer ${{ env.access_token }}")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            sleep 10
          done
          echo "Final status: $STATUS"
          OUTPUT_URIS=$(echo "$RESPONSE" | jq -r '.results[].output[].uri')

          echo "job_response=$RESPONSE" >> "$GITHUB_ENV"

          {
            echo "output_uris<<EOF"
            echo "$OUTPUT_URIS"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Save Generated Tests
        run: |
          OUTPUT_URIS="${{ env.output_uris }}"

          while IFS= read -r uri; do
            FILE_URL="http://api.gftaiimpact.local${uri}" 
            FILE_CONTENT=$(curl --location "$FILE_URL" --header "Authorization: Bearer ${{ env.access_token }}")
            CLASS_NAME=$(basename "$uri" .java)
            TEST_FILE="supplier-api/src/test/${uri#src/main/}"
            TEST_FILE="${TEST_FILE%.java}Test.java"
          
            mkdir -p "$(dirname "$TEST_FILE")"
            echo "$FILE_CONTENT" > "$TEST_FILE"
          done <<< "$OUTPUT_URIS"

      - name: Prepare and Send to API (DocCreator)
        id: send_api2
        run: |

          FILES_ARRAY=()
          while IFS= read -r FILE; do
            CLASS_NAME=$(basename "$FILE" .java)
            FILES_ARRAY+=(--form "files=@${FILE}")
          done <<< "${{ env.java_files }}"

          RESPONSE=$(curl --location 'http://api.gftaiimpact.local/ai/document' \
            --header "Authorization: Bearer ${{ env.access_token }}" \
            --form "RunName=GenerateDocPR" \
            "${FILES_ARRAY[@]}" \
            --form "jobName=DemoDocCreator" \
            --form "DocumentationFormat=markdown" \
            --form "DiagramFormat=Mermaid" \
            --form "SourceCodeLanguage=Java" \
            --form "DocumentationAudience=Developer" \
            --form "PromptId=DocCreator__DocumentCode_V3" \
            --form "TargetExtension=md" \
            --form "Llm=${{ vars.LLM }}" \
            --form "AdditionalInstructions=Generate all answers in ${{ vars.LANGUAGE }} and If the code have vulnerabilities, describe all in a new # vulnerabilities section")           
          echo "API Response: $RESPONSE"
          JOB_ID=$(echo $RESPONSE)
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: Monitor Job Status
        id: monitor_status2
        run: |
          JOB_ID=${{ env.job_id }}
          STATUS="Pending"
          while [[ "$STATUS" != "Completed" ]]; do
            RESPONSE=$(curl --location "http://api.gftaiimpact.local/ai/jobs/$JOB_ID/status" \
              --header "Authorization: Bearer ${{ env.access_token }}")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            sleep 10
          done
          echo "Final status: $STATUS"
          OUTPUT_URIS=$(echo "$RESPONSE" | jq -r '.results[].output[].uri')

          echo "job_response=$RESPONSE" >> "$GITHUB_ENV"

          {
            echo "output_uris<<EOF"
            echo "$OUTPUT_URIS"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Save Generated Docs
        run: |

          OUTPUT_URIS="${{ env.output_uris }}"

          while IFS= read -r uri; do
            FILE_URL="http://api.gftaiimpact.local${uri}" 
            echo "File URL: $FILE_URL"
            echo "curl --location $FILE_URL --header 'Authorization: Bearer ${{ env.access_token }}'
            FILE_CONTENT=$(curl --location "$FILE_URL" --header "Authorization: Bearer ${{ env.access_token }}")
            CLASS_NAME=$(basename "$uri" | sed 's/\.java\.md$//')
            DOC_FILE="wiki/$(dirname "$uri")/$(CLASS_NAME).md"
          
            mkdir -p "$(dirname "$DOC_FILE")"
            echo "$FILE_CONTENT" > "$DOC_FILE"
          done <<< "$OUTPUT_URIS"

      - name: Commit and Push Documenter and Tests
        run: |
          git config --global user.name 'gft-ai-impact[bot]'
          git config --global user.email 'ai-impact[bot]@gft.com'
          git add .
          git commit -m "Add generated Documentations and Unit Tests"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "AI Impact documentation and Unit Tests"
          title: "Documentation and Unit Tests created by IA Impact"
          body: "Pull request created by IA Impact CodeDocumenter and CodeTester."
          branch: "tester-by-ai"
          delete-branch: true
          add-paths: |
              ./**/*.java
              ./**/*.md
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: "auto-generated, testes"
          draft: false

